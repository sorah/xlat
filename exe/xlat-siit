#!/usr/bin/env ruby

require 'logger'
require 'optparse'
require 'xlat/adapters/linux_tun'
require 'xlat/address_translators/rfc6052'
require 'xlat/rfc7915'
require 'xlat/runner'

opt = OptionParser.new do |opt|
  opt.banner = "Usage: #{File.basename($0)} [options] IFNAME SRC::/N DST::/N"
  opt.on('--multiqueue COUNT', Integer) {|n| @multiqueue = n }
end
opt.parse!(ARGV)

if ARGV.size != 3
  $stderr.puts opt.help
  exit 1
end

ifname, src_prefix, dst_prefix = *ARGV
src_translator = Xlat::AddressTranslators::Rfc6052.new(src_prefix)
dst_translator = Xlat::AddressTranslators::Rfc6052.new(dst_prefix)

def do_work(stderr, ifname, src_translator, dst_translator, multiqueue)
  logger = Logger.new(stderr)

  Xlat::Adapters::LinuxTun.open(ifname, multiqueue:) do |tun|
    tun.mtu = 1500

    loop do
      Xlat::Runner.new(
        adapter: tun,
        translator: Xlat::Rfc7915.new(
          source_address_translator: src_translator,
          destination_address_translator: dst_translator,
        ),
        logger:,
      ).run
    end

  rescue
    logger.error { $!.full_message }
  end
end

begin
  require 'pf2'
rescue LoadError
  def profile = yield
else
  def profile
    return yield unless ENV.key?('XLAT_PROFILE')

    Pf2.start(threads: [Thread.current])
    $profiling = true
    begin
      yield
    ensure
      $profiling = false
      Pf2.stop
    end
  end
end

Signal.trap(:USR1) do
  if $profiling
    profile = Pf2.stop
    begin
      File.write("/tmp/xlat-#$$.pf2profile", profile)
    ensure
      Pf2.start
    end
  end
end

RubyVM::YJIT.enable if defined?(RubyVM::YJIT.enable) && !ENV.key?('XLAT_NOJIT')

if @multiqueue
  workers = []
  while true
    while workers.size < @multiqueue
      workers << Ractor.new($stderr.dup, ifname, src_translator, dst_translator, true, &method(:do_work))
    end
    r, = Ractor.select(*workers)
    workers.delete(r)
  end
else
  profile do
    do_work($stderr, ifname, src_translator, dst_translator, false)
  end
end
